# ADD TOTAL TOKENS
# spread fees are expresed in sell token
# write a how to query on a specific block


######################################################################################################################
type CowSwap @entity {
  "Singleton #1"
  id: ID!
  "Total token ever traded"
  tokensTotal: BigInt!
  "Total orders placed"
  ordersTotal: BigInt!
  "Total unique addresses on cowsap"
  usersTotal: BigInt!
  "Total different settlements"
  settlementTotal: BigInt!
  "Total traded amount in USD"
  totalTradedAmountUsd: BigDecimal
  "Total traded amount in ETH"
  totalTradedAmountEth: BigDecimal
  "Total fee amount in USD"
  totalFeeAmountUsd: BigDecimal
  "Total fee amount in Eth"
  totalFeeAmountEth: BigDecimal
}

######################################################################################################################
type CowSwapDayData @entity {
  "Day timestamp"
  id: ID!
  "Start day timestamp"
  timestamp: BigInt!
  "Total token traded that day"
  tokensTotal: BigInt!
  "Total orders placed that day"
  ordersTotal: BigInt!
  "Total different settlements that day"
  settlementTotal: BigInt!
  "Total traded amount in USD for the day"
  totalTradedAmountUsd: BigDecimal
  "Total traded amount in ETH for the day"
  totalTradedAmountEth: BigDecimal
  "Total fee amount in USD for the day"
  totalFeeAmountUsd: BigDecimal
  "Total fee amount in Eth for the day"
  totalFeeAmountEth: BigDecimal
}

######################################################################################################################
type CowSwapHourData @entity {
  "Hour timestamp"
  id: ID!
  "Start hour timestamp"
  timestamp: BigInt!
  "Total token traded that hour"
  tokensTotal: BigInt!
  "Total orders placed that hour"
  ordersTotal: BigInt!
  "Total different settlements that hour"
  settlementTotal: BigInt!
  "Total traded amount in USD for the hour"
  totalTradedAmountUsd: BigDecimal
  "Total traded amount in ETH for the hour"
  totalTradedAmountEth: BigDecimal
  "Total fee amount in USD for the hour"
  totalFeeAmountUsd: BigDecimal
  "Total fee amount in Eth for the hour"
  totalFeeAmountEth: BigDecimal
}

######################################################################################################################
# It makes sense to add symbol, decimals and name? I mean for making a single query to fetch that data
type TokenDayData @entity {
  "TokenAddress + timestamp day"
  id: ID!
  "Token address"
  address: Bytes!
  "Start day timestamp"
  timestamp: BigInt!
  "Total amount traded that day in USD"
  totalAmountTradedUsd: BigDecimal!
  "Total amount traded that day in ETH"
  totalAmountTradedEth: BigDecimal!
  "Number of trades that day"
  totalTrades: BigInt!
}

######################################################################################################################
type TokenHourData @entity {
  "TokenAddress + timestamp hour"
  id: ID!
  "Token address"
  address: Bytes!
  "Start hour timestamp"
  timestamp: BigInt!
  "Total amount traded that hour in USD"
  totalAmountTradedUsd: BigDecimal!
  "Total amount traded that hour in ETH"
  totalAmountTradedEth: BigDecimal!
  "Number of trades that hour"
  totalTrades: BigInt!
}

######################################################################################################################
type TradeDayData @entity {
  "Day timestamp"
  id: ID!
  "Day timestamp"
  timestamp: BigInt!
  "Trade's fee amount for that day"
  feeAmount: BigInt! 
  "Trade event buyAmount that day"
  buyAmount: BigInt!
  "Trade event sellAmount that day"
  sellAmount: BigInt!
  "Traded tokens that day"
  tokens: [Token!]!
  buyAmountETH: BigDecimal
  sellAmountETH: BigDecimal
  buyAmountUSD: BigDecimal
  sellAmountUSD: BigDecimal
}

######################################################################################################################
type TradeHourData @entity {
  "Day timestamp"
  id: ID!
  "Day timestamp"
  timestamp: BigInt!
  "Trade's fee amount for that day"
  feeAmount: BigInt! 
  "Trade event buyAmount that day"
  buyAmount: BigInt!
  "Trade event sellAmount that day"
  sellAmount: BigInt!
  "Traded tokens that day"
  tokens: [Token!]!
  buyAmountETH: BigDecimal
  sellAmountETH: BigDecimal
  buyAmountUSD: BigDecimal
  sellAmountUSD: BigDecimal
}

type User @entity {
  "Trade event order owner"
  id: ID!
  "Owner's address"
  address: Bytes!
  "First trade block timestamp"
  firstTradeTimestamp: BigInt!
  "List of orders placed by this user"
  ordersPlaced: [Order!]! @derivedFrom(field: "owner")
  "isSolver"
  isSolver: Boolean
  ######################################################################################################################
  "solvedAmount" 
  numberOfTrades: Int! # write a how to do it in the query or add the prop. 
  solvedAmountEth: BigDecimal
  solvedAmountUsd: BigDecimal
  tradeAmountUsd: BigDecimal
  tradeAmountEth: BigDecimal
}

type Token @entity {
  "Token address to hexString"
  id: ID!
  "Token address"
  address: Bytes!
  "First token trade block timestamp"
  firstTradeTimestamp: BigInt!
  "Token name fetched by ERC20 contract call"
  name: String!
  "Token symbol fetched by contract call"
  symbol: String!
  "Token decimals fetched by contract call"
  decimals: Int!
  ######################################################################################################################
  amountHistory: [TokenTradingEvent!]! derivedFrom(field: "token")
  numberOfTrades: Int! # write a how to do it in the query or add the prop. 
  totalAmountTradedUsd: BigDecimal
  totalAmountTradedEth: BigDecimal
}

######################################################################################################################
type TokenTradingEvent @entity {
  "kinda token-timestamp"
  id: ID!
  token: Token!
  trade: Trade!
  timestamp: BigInt!
  amountEth: BigDecimal!
  amountUsd: BigDecimal!
}

type Order @entity {
  "Trade's OrderUid to hex string"
  id: ID!
  "Trade's owner or presign User"
  owner: User
  "block's timestamp on trade event"
  tradesTimestamp: BigInt
  "block's timestamp on invalidate event"
  invalidateTimestamp: BigInt
  "block's timestamp on presign event"
  presignTimestamp: BigInt
  "Array of trades on the order"
  trades: [Trade!] @derivedFrom(field: "order")
  "Boolean value true by default unless is invalidated by the event"
  isValid: Boolean!
}

type Trade @entity {
  "This Id is composed using orderId|txHashString|eventIndex"
  id: ID!
  "Block's timestamp"
  timestamp: BigInt!
  "Transaction's gas price"
  gasPrice: BigInt!
  "Transaction's gas limit"
  gasLimit: BigInt!
  "Trade's fee amount"
  feeAmount: BigInt! 
  "Trade event transaction hash"
  txHash: Bytes!
  "Settlement"
  settlement: Settlement!
  "Trade event buyAmount"
  buyAmount: BigInt!
  "Trade event sellAmount"
  sellAmount: BigInt!
  "Trade event sellToken"
  sellToken: Token!
  "Trade event buyToken"
  buyToken: Token!
  "Order"
  order: Order!
  ######################################################################################################################
  buyAmountETH: BigDecimal
  sellAmountETH: BigDecimal
  buyAmountUSD: BigDecimal
  sellAmountUSD: BigDecimal
  # both should be the same or so.
}

type Settlement @entity {
  "TxHash"
  id: ID!
  "Transaction hash"
  txHash: Bytes!
  "First trade timestamp"
  firstTradeTimestamp: BigInt!
  "Collection of trades"
  trades: [Trade!] @derivedFrom(field: "settlement")
  ######################################################################################################################
  # add the solver
  solver: User
}